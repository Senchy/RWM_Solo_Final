/*
-----------------------------------------------------------------------------
Filename:    ogrehavoktest.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC9 (August 2010)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#include "stdafx.h"
#include "BaseApplication.h"
#include "ogrehavoktest.h"

//-------------------------------------------------------------------------------------

const int NUM_BOXES=20;

ogrehavoktest::ogrehavoktest(void)
{
}
//-------------------------------------------------------------------------------------
ogrehavoktest::~ogrehavoktest(void)
{
	physics.TidyUp();
}

//-------------------------------------------------------------------------------------


void ogrehavoktest::createScene(void)
{	
	mSceneMgr->setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);

	// Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5, 0.5, 0.5));

    // Create a light
    Ogre::Light* light = mSceneMgr->createLight("MainLight");
    light->setPosition(20,500,50);

	physics.SetUp(); //perform havok initialisation stuff




	////plane created
	hkVector4 groundBox( 200.0f, 2.0f, 200.0f );
		hkVector4 position( 0.0f, -100.0f, 0.0f );
		hkpConvexShape* shape = new hkpBoxShape( groundBox , 0 );

		hkpRigidBodyCinfo ci; //rigidbody class info; sets properties of rigid body

		ci.m_shape = shape;
		ci.m_motionType = hkpMotion::MOTION_FIXED;
		ci.m_position = position;
		ci.m_qualityType = HK_COLLIDABLE_QUALITY_FIXED;  //floor shouldn't move
		ci.m_restitution=1.0;
		ci.m_friction=0.8;

		hkpRigidBody* floor=new hkpRigidBody( ci );
		physics.GetPhysicsWorld()->addEntity( floor );
		
		floor->removeReference(); 
		shape->removeReference();


	Ogre::MeshPtr p =Ogre::MeshManager::getSingleton().createPlane("GroundPlane", 
		Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, 
		Ogre::Plane(Ogre::Vector3(0.0,1.0,0.0),
			Ogre::Vector3(position(0),position(1),position(2)))
		,400,400,20,20,true, 1,1.0f,1.0f,Vector3::UNIT_X);

	Ogre::SceneNode* planeNode = mSceneMgr->getRootSceneNode()->createChildSceneNode();
    Ogre::Entity* entGround = mSceneMgr->createEntity("Viewer_ZXPlane","GroundPlane");
	entGround->setMaterialName("Examples/Rockwall");
    entGround->setCastShadows(false);
	
	planeNode->attachObject(entGround);
	/////end plane////////

	mSceneMgr->setSkyDome(true, "Examples/CloudySky",5,8);
	
}

void ogrehavoktest::destroyScene(void){

	BaseApplication::destroyScene();
}

bool ogrehavoktest::frameRenderingQueued(const Ogre::FrameEvent& evt){

	physics.Simulate(evt.timeSinceLastFrame*3);
	return BaseApplication::frameRenderingQueued(evt); 
}




#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        ogrehavoktest app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
